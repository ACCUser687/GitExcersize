import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowFocusListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
 
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.DefaultCaret;
 
@SuppressWarnings("serial")
public class JavaClient extends JFrame implements ActionListener, KeyListener,
        FocusListener {
 
    // Extra variables
    static String message = "";
    static String userName = "";
    static String iPAddress = null;
 
    // Networking Variables
    static Socket socket = null;
    static PrintWriter writer = null;
 
    // // Graphics Variables
    static JTextArea messsageReceive = new JTextArea(100, 50);
    static JTextArea messageSend = new JTextArea(100, 50);
    JButton send = new JButton("Send");
    JScrollPane pane2, pane1;
 
    public JavaClient() {
        super("Client");
        setBounds(0, 0, 400, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(false);
        setLayout(null);
 
        messsageReceive.setEditable(false);
        messsageReceive.setBackground(Color.BLACK);
        messsageReceive.setForeground(Color.WHITE);
        messsageReceive.addFocusListener(this);
        messsageReceive.setText("");
 
        messsageReceive.setWrapStyleWord(true);
        messsageReceive.setLineWrap(true);
 
        pane2 = new JScrollPane(messsageReceive);
        pane2.setBounds(0, 0, 400, 200);
        pane2.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        add(pane2);
 
        messageSend.setBackground(Color.LIGHT_GRAY);
        messageSend.setForeground(Color.BLACK);
        messageSend.setLineWrap(true);
        messageSend.setWrapStyleWord(true);
 
        messageSend.setText("Enter Text Here");
        messageSend.addFocusListener(this);
        messageSend.addKeyListener(this);
 
        pane1 = new JScrollPane(messageSend);
        pane1.setBounds(0, 200, 400, 200);
        pane1.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        add(pane1);
 
        send.setBounds(0, 400, 400, 40);
        add(send);
        send.addActionListener(this);
 
 
        addWindowFocusListener(new WindowFocusListener() {
            @Override
            public void windowGainedFocus(WindowEvent e) {
 
                if (!messsageReceive.getText().equals("")) {
                    System.out.println("");
 
                    writer.println("\t<<<" + userName + ": Focusing to Comunication>>>");
                    writer.flush();
 
                }
            }
 
            @Override
            public void windowLostFocus(WindowEvent e) {
                if (!messsageReceive.getText().equals("")) {
                    writer.println("\t<<<" + userName + ": Ignoring to Comunication>>>");
                    writer.flush();
                }
            }
 
        });
 
        if ((userName) != null) {
            setVisible(true);
        } else {
            System.exit(0);
        }
    }
 
   
    public static void main(String[] args) throws Exception {
        
 
        userName = JOptionPane.showInputDialog("User Name (Client)");
        iPAddress = JOptionPane.showInputDialog("Enter Server IpAddress");
 
        // swing thread
        (new Thread(new Runnable() {
            public void run() {
                new JavaClient();
 
            }
 
        })).start();
 
        socket = new Socket(iPAddress, 8888);
        messsageReceive.setText("Connected!");
 
        // listening port thread
        (new Thread(new Runnable() {
            public void run() {
 
                try {
                    BufferedReader reader = new BufferedReader(
                            new InputStreamReader(socket.getInputStream()));
 
                    String line = null;
                    boolean testFlag = true;
                    while ((line = reader.readLine()) != null) {
                        messsageReceive.append("\n" + line);
                        cursorUpdate();
 
                        if (!reader.ready()) {
                            testFlag = true;
                        }
                    }
 
                } catch (IOException ee) {
                    try {
                        socket.close();
                    } catch (IOException eee) {
                        eee.printStackTrace();
                    }
                    ee.printStackTrace();
                }
            }
        })).start();
 
        try {
            writer = new PrintWriter(socket.getOutputStream(), true);
 
        } catch (IOException e) {
            try {
                socket.close();
            } catch (IOException eee) {
            }
        }
    }
 
    //KeyBoardEvents
 
    @Override
    public void keyTyped(KeyEvent e) {
    }
 
    @Override
    public void keyReleased(KeyEvent e) {
    }
 
    @Override
    public void keyPressed(KeyEvent e) {
 
        if ((e.getKeyCode() == KeyEvent.VK_ENTER) && e.isShiftDown()) {
            messageSend.append("\n");
 
        } else if (e.getKeyCode() == KeyEvent.VK_ENTER) {
            sendMessage();
        }
 
        else if ((e.getKeyCode() == KeyEvent.VK_X) && e.isControlDown()) {
            System.exit(0);
        }
    }
 
    // FocusEvents
    @Override
    public void focusGained(FocusEvent e) {
 
        if (e.getSource() == messsageReceive) {
            if (!(messsageReceive.getText().equals("") || messsageReceive.getText().equals(
                    "Connected!"))) {
 
                writer.println("\t ***" + userName
                        + ": The Msg is being read......***");
                writer.flush();
            }
        } else if (e.getSource() == messageSend) {
            // Set Mesg sending area clear
            if (messageSend.getText().equals("Enter Text Here")) {
                messageSend.setText("");
            } else {
                writer.println("\t ***" + userName
                        + ": The Msg is being typed......***");
                writer.flush();
            }
 
        }
    }
 
    @Override
    public void focusLost(FocusEvent e) {
    }
 
    private void sendMessage() {
        writer.println(userName + " :" + messageSend.getText());
 
        messsageReceive.append("\nMe: " + messageSend.getText());
        writer.flush();
        cursorUpdate();
 
        messageSend.setText("");
        messageSend.setCaretPosition(0);
    }
 
    private static void cursorUpdate() {
        // Update cursor position
        DefaultCaret caret = (DefaultCaret) messsageReceive.getCaret();
        caret.setDot(messsageReceive.getDocument().getLength());
 
        DefaultCaret caret2 = (DefaultCaret) messageSend.getCaret();
        caret2.setDot(messageSend.getDocument().getLength());
    }


	@Override
	public void actionPerformed(ActionEvent e) {
		
		
	}
}
 
